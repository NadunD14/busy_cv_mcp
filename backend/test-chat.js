import { chatHandler } from './src/routes/chat.js';

// Sample parsed resume data for testing
const sampleParsedResume = {
    name: "Nadun Sandanayaka",
    email: "nadunsandanayaka01@gmail.com",
    phone: "+94 712442977",
    skills: ["Python", "JavaScript", "Java", "PHP", "React", "Next.js", "TensorFlow", "Docker"],
    education: ["Bachelor of Science in Information Systems", "University of Colombo School of Computing (UCSC)", "2023 ‚Äì present"],
    jobs: [
        "BrandBoost - Influencer Marketing Platform Developer - Comprehensive platform connecting social media influencers with business owners for seamless product promotion",
        "Idealize-2025 Datathon - Machine Learning Engineer - Cancer Prediction Model achieving 6th place in ML category"
    ],
    raw: `Nadun Sandanayaka
nadunsandanayaka01@gmail.com   ‚Äî      +94 712442977
github.com/NadunD14   ‚Äî   LinkedIn Profile
Negombo Road, Kurunegala, Sri Lanka

Profile Summary
Skilled full-stack developer with expertise in Python, JavaScript, and PHP, specializing in web application development and machine learning solutions.

Education
Bachelor of Science in Information Systems   2023 ‚Äì present
University of Colombo School of Computing (UCSC)

Technical Skills
‚Ä¢ Programming Languages: Python, JavaScript, Java, PHP
‚Ä¢ Machine Learning & Data Science: TensorFlow, Scikit-learn, Keras, Pandas, NumPy
‚Ä¢ Web Development: React, Next.js, Node.js, Express.js, HTML/CSS

Projects
BrandBoost - Influencer Marketing Platform
Idealize-2025 Datathon - Cancer Prediction Model`
};

async function testChatResponses() {
    console.log('üß™ Testing Chat Responses...\n');

    const testQuestions = [
        "What is my name?",
        "What are my skills?",
        "What is my education?",
        "What is my email?",
        "Tell me about my work experience",
        "What programming languages do I know?",
        "Where do I study?",
        "What projects have I worked on?"
    ];

    console.log('üìã Testing Rule-based Responses (useGroq = false):');
    console.log('='.repeat(60));

    for (const question of testQuestions) {
        try {
            const response = await chatHandler.generateAnswer(sampleParsedResume, question, false);
            console.log(`\n‚ùì Question: "${question}"`);
            console.log(`‚úÖ Answer: ${response.text}`);
            console.log(`üìä Confidence: ${(response.confidence * 100).toFixed(0)}%`);
            console.log(`üîß Source: ${response.source || 'rule-based'}`);
        } catch (error) {
            console.log(`\n‚ùì Question: "${question}"`);
            console.log(`‚ùå Error: ${error.message}`);
        }
    }

    // Test DistilBERT AI if available
    if (process.env.HUGGINGFACE_API_TOKEN) {
        console.log('\n\nü§ñ Testing DistilBERT AI Responses (useAI = true):');
        console.log('='.repeat(60));

        for (const question of testQuestions.slice(0, 3)) { // Test first 3 questions only
            try {
                const response = await chatHandler.generateAnswer(sampleParsedResume, question, true);
                console.log(`\n‚ùì Question: "${question}"`);
                console.log(`‚úÖ Answer: ${response.text}`);
                console.log(`üìä Confidence: ${(response.confidence * 100).toFixed(0)}%`);
                console.log(`üîß Source: ${response.source}`);
            } catch (error) {
                console.log(`\n‚ùì Question: "${question}"`);
                console.log(`‚ùå Error: ${error.message}`);
            }
        }
    } else {
        console.log('\n\nü§ñ DistilBERT AI Testing Skipped');
        console.log('='.repeat(60));
        console.log('üí° To test AI responses, set HUGGINGFACE_API_TOKEN in your .env file');
        console.log('üîó Get a free API token at: https://huggingface.co/settings/tokens');
    }

    console.log('\n\nüéØ Test Results Summary:');
    console.log('‚úÖ Rule-based chat system tested');
    console.log('‚úÖ Response formatting improved');
    console.log('‚úÖ Name extraction enhanced');
    console.log('‚úÖ Fallback logic optimized');

    if (process.env.HUGGINGFACE_API_TOKEN) {
        console.log('‚úÖ DistilBERT AI-powered responses tested');
    } else {
        console.log('‚ö†Ô∏è  DistilBERT AI-powered responses not tested (no API token)');
    }
}

// Run the test
testChatResponses().catch(console.error);
